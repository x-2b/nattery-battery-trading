version: '3.8'

services:
  # API Gateway
  gateway:
    build:
      context: ./gateway
      dockerfile: Dockerfile
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - frontend
      - device-service
      - trading-service
      - analytics-service
      - user-service
    networks:
      - nattery-network
    restart: unless-stopped

  # Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=https://localhost
    depends_on:
      - device-service
      - trading-service
      - analytics-service
      - user-service
    networks:
      - nattery-network
    restart: unless-stopped

  # Device Service
  device-service:
    build:
      context: ./services/device-service
      dockerfile: Dockerfile
    container_name: nattery-device-service
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - DATABASE_URL=postgresql://nattery:password@postgres:5432/nattery
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://nattery:password@rabbitmq:5672
      - MQTT_BROKER_URL=mqtt://mosquitto:1883
      - MQTT_USERNAME=nattery
      - MQTT_PASSWORD=password
      - MQTT_CLIENT_ID=device-service
      - MQTT_TOPIC_PREFIX=nattery
      - INFLUXDB_URL=http://influxdb:8086
      - INFLUXDB_TOKEN=${INFLUXDB_TOKEN}
      - INFLUXDB_ORG=nattery
      - INFLUXDB_BUCKET=energy_data
      - CORS_ORIGIN=https://localhost
      - LOG_LEVEL=info
      - LOG_FORMAT=json
      - HEALTH_CHECK_INTERVAL=30000
      - DATA_BATCH_SIZE=100
      - DATA_FLUSH_INTERVAL=5000
      - DATA_RETENTION_DAYS=365
    depends_on:
      - postgres
      - redis
      - rabbitmq
      - mosquitto
      - influxdb
    networks:
      - nattery-network
    volumes:
      - ./logs/device-service:/app/logs
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Trading Service
  trading-service:
    build:
      context: ./services/trading-service
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://nattery:password@postgres:5432/nattery
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://nattery:password@rabbitmq:5672
      - INFLUXDB_URL=http://influxdb:8086
      - INFLUXDB_TOKEN=${INFLUXDB_TOKEN}
      - INFLUXDB_ORG=nattery
      - INFLUXDB_BUCKET=energy_data
      - ENTSOE_API_TOKEN=${ENTSOE_API_TOKEN}
    depends_on:
      - postgres
      - redis
      - rabbitmq
      - influxdb
    networks:
      - nattery-network
    restart: unless-stopped

  # Analytics Service
  analytics-service:
    build:
      context: ./services/analytics-service
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://nattery:password@postgres:5432/nattery
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://nattery:password@rabbitmq:5672
      - INFLUXDB_URL=http://influxdb:8086
      - INFLUXDB_TOKEN=${INFLUXDB_TOKEN}
      - INFLUXDB_ORG=nattery
      - INFLUXDB_BUCKET=energy_data
    depends_on:
      - postgres
      - redis
      - rabbitmq
      - influxdb
    networks:
      - nattery-network
    restart: unless-stopped

  # User Service
  user-service:
    build:
      context: ./services/user-service
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://nattery:password@postgres:5432/nattery
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://nattery:password@rabbitmq:5672
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=24h
      - JWT_REFRESH_EXPIRES_IN=7d
    depends_on:
      - postgres
      - redis
      - rabbitmq
    networks:
      - nattery-network
    restart: unless-stopped

  # Edge Bridge Service (Modbus-MQTT Bridge)
  edge-bridge:
    build:
      context: ./services/edge-bridge
      dockerfile: Dockerfile
    container_name: nattery-edge-bridge
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - PORT=8000
      - LOG_LEVEL=INFO
      - PYTHON_ENV=production
      - MODBUS_PORT=/dev/ttyUSB0
      - MODBUS_BAUDRATE=9600
      - MODBUS_SLAVE_ID=1
      - MODBUS_TIMEOUT=3
      - MODBUS_RETRY_COUNT=3
      - MODBUS_RETRY_DELAY=1.0
      - MQTT_BROKER_URL=mqtt://mosquitto:1883
      - MQTT_USERNAME=nattery
      - MQTT_PASSWORD=password
      - MQTT_CLIENT_ID=edge-bridge
      - MQTT_KEEPALIVE=60
      - MQTT_QOS=1
      - MQTT_TOPIC_PREFIX=nattery
      - DATA_COLLECTION_INTERVAL=5
      - HEALTH_CHECK_INTERVAL=30
      - MAX_CONSECUTIVE_FAILURES=5
      - MAX_QUEUE_SIZE=100
      - COMMAND_TIMEOUT=30
      - REDIS_URL=redis://redis:6379
      - DEVICE_ID=inverter-001
      - DEVICE_TYPE=inverter
      - DEVICE_MODEL=growatt-spf-5000
    devices:
      - "/dev/ttyUSB0:/dev/ttyUSB0"  # USB-RS485 converter
    privileged: true  # Required for hardware access
    depends_on:
      - mosquitto
      - redis
    networks:
      - nattery-network
    volumes:
      - ./logs/edge-bridge:/app/logs
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=nattery
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=nattery
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - nattery-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U nattery"]
      interval: 30s
      timeout: 10s
      retries: 3

  # InfluxDB (Time-series database)
  influxdb:
    image: influxdb:2.7-alpine
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=nattery
      - DOCKER_INFLUXDB_INIT_PASSWORD=password
      - DOCKER_INFLUXDB_INIT_ORG=nattery
      - DOCKER_INFLUXDB_INIT_BUCKET=energy_data
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=${INFLUXDB_TOKEN}
    volumes:
      - influxdb_data:/var/lib/influxdb2
    networks:
      - nattery-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "influx", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis (Caching and session store)
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - nattery-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # RabbitMQ (Message broker for service communication)
  rabbitmq:
    image: rabbitmq:3-management-alpine
    environment:
      - RABBITMQ_DEFAULT_USER=nattery
      - RABBITMQ_DEFAULT_PASS=password
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - nattery-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Mosquitto MQTT Broker (IoT device communication)
  mosquitto:
    image: eclipse-mosquitto:2.0
    volumes:
      - ./mosquitto/config:/mosquitto/config
      - ./mosquitto/data:/mosquitto/data
      - ./mosquitto/log:/mosquitto/log
    networks:
      - nattery-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mosquitto_pub", "-h", "localhost", "-t", "test", "-m", "test"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  influxdb_data:
  redis_data:
  rabbitmq_data:

networks:
  nattery-network:
    driver: bridge 